import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { Bit, Test, Step } from '../components';
import { useContext } from 'react';
import { DataContext } from '../components/DataContext';

// TODO: Need to be able to step through machine operations
// TODO: Add bit labels if needed

export default function QuantumMachine() {
  const {
    name,
    setName,
    inputBits,
    setInputBits,
    tests,
    outputBits,
    operations,
    changeOperation,
    toggleTestBit,
    addTest,
    removeTest,
    removeBit,
    addBit,
    save,
    clear,
  } = useContext(DataContext);
  return (
    <div className={styles.container}>
      <Head>
        <title>Quantum Machine</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.actions}>
          <input
            className={styles.name}
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <div onClick={() => save()} className={styles.button}>
            Save
          </div>
          <div onClick={() => clear()} className={styles.button}>
            Clear
          </div>
          <div onClick={() => addBit()} className={styles.button}>
            Add Bit
          </div>
          <div onClick={() => removeBit()} className={styles.button}>
            Remove Bit
          </div>
        </div>
        <div className={styles.machine}>
          <div className={styles.input}>
            {inputBits.map((value, index) => (
              <Bit
                key={index}
                value={value}
                onToggle={() => {
                  setInputBits(inputBits.map((v, i) => (i === index ? !v : v)));
                }}
              />
            ))}
          </div>
          <div className={styles.operations}>
            {operations.map((ops, idx) => (
              <Step
                ops={ops}
                key={idx}
                onChange={(bitIndex) => changeOperation(idx, bitIndex)}
              />
            ))}
          </div>
          <div className={styles.output}>
            {outputBits.map((value, index) => (
              <Bit key={index} value={value} />
            ))}
          </div>
        </div>
        <div className={styles.tests}>
          {tests.map((test, i) => (
            <Test
              key={i}
              {...test}
              operations={operations}
              onInputToggle={(b) => toggleTestBit('input', i, b)}
              onOutputToggle={(b) => toggleTestBit('output', i, b)}
              onRemove={() => removeTest(i)}
            />
          ))}
          <div onClick={() => addTest()} className={styles.addTest}>
            Add Test
          </div>
        </div>
      </main>
    </div>
  );
}
